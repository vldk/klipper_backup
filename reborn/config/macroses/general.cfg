[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 2.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 2.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 4.0   ; the value to unretract while RESUME
variable_speed_unretract  : 30.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 50.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 2  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 2  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : "_PAUSE_AFTER"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: "_CANCEL_PRINT_AFTER"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


# START_PRINT BED_TEMP={material_bed_temperature_layer_0} EXTRUDER_TEMP={material_print_temperature_layer_0}
[gcode_macro START_PRINT]
gcode:
  {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
  {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
  
  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
  G4 P2000  # Wait 2 seconds… (give StallGuard registers time to clear).  You may need to give this more time if it's not reliable.

  # reset acceleration 
  {% set ACCEL_DEFAULT = printer.configfile.settings['printer'].max_accel|float %}
  {% set ACCEL_TO_DECEL_DEFAULT = printer.configfile.settings['printer'].max_accel_to_decel|float %}
  SET_VELOCITY_LIMIT ACCEL={ACCEL_DEFAULT}
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL={ACCEL_TO_DECEL_DEFAULT}

  # BED_MESH_PROFILE LOAD=default
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M220 S100 ;reset feedrate
  M221 S100 ;reset flowrate
  G21 ;metric values
  G90 ;absolute positioning
  M82 ;set extruder to absolute mode
  G92 E0 ;reset extruder
  M107 ;start with the fan off
  # M117 Homing ...
  # G28
  # G1 Z15.0 F140 ;move the platform down 15mm
  M117 Start heating ...
  STATUS_HEATING
  # Preheat extruder
  {% if printer.extruder.temperature < 150 %}
    M109 S150 # if less - wait untill heated
  {% else %}
    M104 S{printer.extruder.temperature} # else just keep min. temp
  {% endif %}
  # Start bed heating
  M140 S{BED_TEMP}
  # Wait for bed to reach temperature
  M190 S{BED_TEMP}
  # Set and wait for nozzle to reach temperature
  M109 S{EXTRUDER_TEMP}
  
  {% if not 'xyz' in printer.toolhead.homed_axes %}
    M117 Homing
    STATUS_HOMING
    G28
  {% endif %}
  {% if printer.z_tilt.applied|lower != 'true' %}
    STATUS_CALIBRATING_Z
    Z_TILT_ADJUST
  {% endif %}
  BED_MESH_PROFILE LOAD=glass
  PLAY_START_PRINT
  STATUS_CLEANING
  G90 ;use absolute coordinates
  M82 ;absolute extrusion mode
  G1 Z5 F1500 ;raise z
  G1 X-2 Y-2 F5000 ;start position
  G1 E20 F360 ; extrude previously retracted filament (at print end)
  G92 E0 ;reset extruder

  ; wipe
  G1 X75 Y1 F5000 ;start position
  G1 Z0.28 F1500 ;lower z
  ; G1 E4 F500 ;prime the filament
  G1 X180 E10 F500 ;1st line
  G1 Y1.6 F5000
  G1 X75 E20 F500 ;2nd line
  G1 Z2 F1500 ;raise z
  G92 E0 ;reset extruder
  STATUS_PRINTING

[gcode_macro END_PRINT]
gcode:
  STATUS_COOLING
  G91 ;use relative coordinates
  # Move nozzle away from print while retracting 40mm
  ; G1 E-4 F1500 ;retract the filament
  G1 X5 Y5 Z0.2 F5000 ;wipe
  G1 E-20 F1300
  # Raise nozzle by 5mm
  G1 Z5 F1500 ;raise z
  G90 ;use absolute coordinates

  G1 X10 Y{printer.toolhead.axis_maximum.x|float - 5.0} F5000 ;park print head
  M107 ;turn off fan
  M104 S0 ;turn off hotend
  M140 S0 ;turn off heatbed
  # M84 ;disable motors
  BED_MESH_CLEAR
  PLAY_FINISH_PRINT
  STATUS_PART_READY

  {% set HOLD_CURRENT = 0.2 %}  ## Change this to the vlaue you used when calibrating stallguard.  In your printer.cfg.
  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOLD_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOLD_CURRENT}
  G4 P2000  # Wait 2 seconds… 


[gcode_macro _CANCEL_PRINT_AFTER]
description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# variable_park: True
gcode:
  STATUS_COOLING
  TURN_OFF_HEATERS
  M106 S0
  # CANCEL_PRINT_BASE
 
  {% set HOLD_CURRENT = 0.2 %}  ## Change this to the vlaue you used when calibrating stallguard.  In your printer.cfg.
  ##  Set the current back to what's in the printer.cfg file. 
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOLD_CURRENT}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOLD_CURRENT}
  G4 P2000  # Wait 2 seconds… 

[gcode_macro _PAUSE_AFTER]
description: Pause the actual running print
# rename_existing: PAUSE_BASE
gcode:
  PLAY_PAUSE_PRINT
  # PAUSE_BASE
  STATUS_BUSY
  SET_IDLE_TIMEOUT TIMEOUT=9000 #2.5 hour timeout


# [gcode_macro M600]
# gcode:
#     SAVE_GCODE_STATE NAME=M600_state
#     PAUSE
#     UNLOAD_FILAMENT
#     RESTORE_GCODE_STATE NAME=M600_state

# [gcode_macro M601]
# gcode:
#     SAVE_GCODE_STATE NAME=M601_state
#     PAUSE
#     RESTORE_GCODE_STATE NAME=M601_state

[gcode_macro T0]
gcode:

[gcode_macro PID_E]
gcode:
  {% set T = params.T|default(230) %}
  STATUS_HEATING
  PID_CALIBRATE HEATER=extruder TARGET={T}

[gcode_macro PID_B]
gcode:
  {% set T = params.T|default(85) %}
  STATUS_HEATING
  PID_CALIBRATE HEATER=heater_bed TARGET={T}

[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
   {% set P = params.P|default(0)|int %}
   {% set R = params.R|default(0)|int %}
   M73.1 P{P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
   SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

[gcode_macro G29]
gcode:
  STATUS_MESHING
  BED_MESH_PROFILE LOAD=stock

# [display_template _printing_time]
# text:
#    {% set ptime = printer["gcode_macro M73"].r %}
#    { "%02d:%02d" % (ptime // 60, ptime % 60) }


#### DEBUG ####
[gcode_macro _PSTATUS]
gcode:
    {% if params.S3 %}
    {% set info = printer[params.S1][params.S2][params.S3] %}
    {% elif params.S2 %}
    {% set info = printer[params.S1][params.S2] %}
    {% elif params.S1 %}
    {% set info = printer[params.S1] %}
    {% else %}
    {% set	info = printer.idle_timeout.state %}
    {% endif %}
    {action_respond_info(info|string)}
